[{"C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\index.js":"1","C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\App.js":"2","C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\components\\home\\Home.jsx":"3","C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\components\\moviedetail\\MovieDetail.jsx":"4","C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\service\\index.js":"5"},{"size":547,"mtime":1626905689795,"results":"6","hashOfConfig":"7"},{"size":455,"mtime":1626905689753,"results":"8","hashOfConfig":"7"},{"size":7661,"mtime":1627077732779,"results":"9","hashOfConfig":"7"},{"size":8047,"mtime":1626905689773,"results":"10","hashOfConfig":"7"},{"size":5514,"mtime":1626986407670,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"10kuvll",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\index.js",[],["24","25"],"C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\components\\home\\Home.jsx",[],"C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\components\\moviedetail\\MovieDetail.jsx",[],"C:\\Users\\User\\Desktop\\Ada\\modulo-08\\popcorn-mania\\src\\service\\index.js",["26"],"import axios from \"axios\";\r\n\r\nconst apiKey = \"dcf2ec03be1f0a8e3533da7bf20d7832\";\r\nconst url =\"https://api.themoviedb.org/3\";\r\nconst nowPlayingUrl = `${url}/movie/now_playing`;\r\nconst topRatedUrl = `${url}/movie/top_rated`;\r\nconst movieUrl =`${url}/movie`;\r\nconst genreUrl =`${url}/genre/movie/list`;\r\nconst moviesUrl =`${url}/discover/movie`;\r\nconst personUrl =`${url}/trending/person/week`;\r\n\r\nexport const fetchMovies = async () => {\r\n    try{\r\n        const {data} = await axios.get(nowPlayingUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: \"en_US\",\r\n                page: 1\r\n            }\r\n        })\r\n\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\"\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"]\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error){ }\r\n}\r\n\r\nexport const fetchGenre = async () => {\r\n    try{\r\n        const {data} = await axios.get(genreUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: \"en_US\",\r\n                page: 1 \r\n            }\r\n        })\r\n        const modifiedData = data[\"genres\"].map((g) =>({\r\n            id: g[\"id\"],\r\n            name: g[\"name\"]\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) {}\r\n}\r\n\r\nexport const fetchMovieByGenre = async (genre_id) => {\r\n    try{\r\n        const {data} = await axios.get(moviesUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: \"en_US\",\r\n                page: 1,\r\n                with_genres: genre_id \r\n            }    \r\n        })\r\n\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\";\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"]\r\n        }))\r\n\r\n        return modifiedData;\r\n    }catch (error){ }\r\n}\r\n\r\nexport const fetchPersons =  async () => {\r\n    try{\r\n        const {data} = await axios.get(personUrl, {\r\n            params: {\r\n                api_key: apiKey\r\n            }\r\n        })\r\n        const modifiedData = data[\"results\"].map((p)=>({\r\n            id: p[\"id\"],\r\n            popularity: p[\"popularity\"],\r\n            name: p[\"name\"],\r\n            profileImg: \"https://image.tmdb.org/t/p/w200\" + p[\"profile_path\"],\r\n            known: p[\"known_for_department\"]\r\n\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchTopRatedMovie = async () => {\r\n    try{\r\n        const {data} = await axios.get(topRatedUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: \"en_US\",\r\n                page: 1\r\n            }  \r\n        })\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\"\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"]\r\n        }))\r\n\r\n        return modifiedData;\r\n    }catch (error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchMovieDetail = async (id) => {\r\n    try{\r\n        const {data} = await axios.get(`${movieUrl}/${id}` , {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: \"en_US\"\r\n            }\r\n        });\r\n        return data;\r\n    }catch (error) { }\r\n}\r\n\r\nexport const fetchMovieVideos = async (id) => {\r\n    try{\r\n        const {data} = await axios.get(`${movieUrl}/${id}/videos`, {\r\n            params: {\r\n                api_key: apiKey\r\n            }   \r\n        });\r\n        return data[\"results\"] [0];\r\n    }catch (error) { }\r\n}\r\n\r\nexport const fetchCasts = async (id) => {\r\n    try{\r\n        const {data} = await axios.get(`${movieUrl}/${id}/credits`, {\r\n            params: {\r\n                api_key: apiKey\r\n            }   \r\n        });\r\n        const modifiedData = data[\"cast\"].map((c)=> ({\r\n            id: c[\"cast_id\"],\r\n            character: c[\"character\"],\r\n            name: c[\"name\"],\r\n            img: \"https://image.tmdb.org/t/p/w200\" + c[\"profile_path\"]\r\n\r\n        }))\r\n\r\n        return modifiedData;\r\n    }catch (error) { }  \r\n}\r\n\r\nexport const fetchSimilarMovie = async (id) => {\r\n    try{\r\n        const {data} = await axios.get(`${movieUrl}/${id}/similar`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: \"en_US\"\r\n            }   \r\n        });\r\n\r\n        const posterUrl = \"https://image.tmdb.org/t/p/original/\"\r\n        const modifiedData = data[\"results\"].map((m) => ({\r\n            id: m[\"id\"],\r\n            backPoster: posterUrl + m[\"backdrop_path\"],\r\n            popularity: m[\"popularith\"],\r\n            title: m[\"title\"],\r\n            poster: posterUrl + m[\"poster_path\"],\r\n            overview: m[\"overview\"],\r\n            rating: m[\"vote_average\"]\r\n        }))\r\n\r\n        return modifiedData;\r\n        \r\n    }catch (error) { }\r\n}\r\n\r\n\r\n\r\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":144,"column":16,"nodeType":"33","messageId":"34","endLine":144,"endColumn":35,"fix":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-whitespace-before-property","Unexpected whitespace before property 0.","MemberExpression","unexpectedWhitespace",{"range":"38","text":"39"},"no-global-assign","no-unsafe-negation",[4205,4206],""]